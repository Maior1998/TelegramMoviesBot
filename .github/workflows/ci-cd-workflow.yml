# This is a basic workflow to help you get started with Actions

name: CI/CD Workflow
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: master
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          cd TelegramMoviesBot
          dotnet restore TelegramMoviesBot.csproj
      - name: build project
        run: |
          cd TelegramMoviesBot
          dotnet build TelegramMoviesBot.csproj --configuration Release --no-restore
      - name: Run tests
        run: dotnet test
      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
         MY_HOME_ADDRESS: ${{ secrets.DOCKER_DOWNLOAD }}
         TELEGRAM_API: ${{ secrets.TELEGRAM_API_KEY }}
         TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        with:
         host: ${{ secrets.REMOTE_HOST }}
         username: ${{ secrets.REMOTE_USER }}
         key: ${{ secrets.SSH_PRIVATE_KEY }}
         port: ${{ secrets.REMOTE_PORT }}
         envs: MY_HOME_ADDRESS,TELEGRAM_API,TMDB_API_KEY
         script: |
            rm Dockerfile
            wget $MY_HOME_ADDRESS
            docker kill telegram_movies_bot_container
            docker image rm telegram_movies_bot
            docker build --build-arg TELEGRAM_API=$TELEGRAM_API --build-arg TMDB_API_KEY=$TMDB_API_KEY -t telegram_movies_bot .
            docker run --name telegram_movies_bot_container -e TELEGRAM_API=$TELEGRAM_API -e TMDB_API_KEY=$TMDB_API_KEY telegram_movies_bot
